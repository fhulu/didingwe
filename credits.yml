include: [navigator,datatable,paygate,wizard,isearch,document]

credit:
  name: Credits
  type: navigator
  base_url: /credits
  default: { url: /credits/own_credit_history }
  items:
    - grant_credits: {action: dialog}
    - own_credit_history: {name: Credit History,access: [user,finance],partner_access: [individual,existing_account,company,post_paid]}
    - all_credit_history: {name: Credit History}
    - buy_credits
    - vspace
    - $heading: {name: Promotions, access: [admin],partner_access: [merchant]}
    - create_promotion
    - manage_promotions
    - vspace
    - $heading: { name: Payments }
    - own_outstanding_approvals
    - all_outstanding_approvals
    - own_purchase_history
    - all_purchase_history
    - vspace
    - $heading: { name: Purchase Orders,access: [admin,finance],partner_access: [merchant,post_paid]}
    - view_purchase_orders
    - own_purchase_orders: {name: View Purchase Orders}

activate:
  access: finance
  partner_access: merchant
  post:
    - collection.values: [credit, $key,client_name: partner.name, client_cellphone: partner.cellphone,client_email: partner.email,quantity]
    - collection.update: [credit, $key, active: 1]
    - emailer.send: { type: activation_email }
    - trigger: [setRowData,"",$key,{usable: 'Yes',style: 'active',actions: 'slide,revoke'}]
    - close_dialog: Credits Activated.


activation_email:
  from: $support_email
  to: $client_name <$client_email>
  subject: Credits Re-activated
  message: >
    Dear <b>$client_name </b> <br><br>
    Your credits have been re-activated on your  account.<br><br>
    Regards,<br><br>
    <b>Customer Operations</b>

deactivation_email:
  from: $support_email
  to: $client_name <$client_email>
  subject: Credits Revoked
  message: >
    Dear <b>$client_name</b> <br><br>
    Your credits have been revoked. Please contact your Administrator for more information.<br><br>
    Regards,<br><br>
    <b>Customer Operations</b>

deactivate:
  access: [finance]
  partner_access: merchant
  confirmation: yes
  post:
    - collection.values: [credit, $key,client_name: partner.name, client_cellphone: partner.cellphone,client_email: partner.email,quantity]
    - collection.update: [credit, $key, active: 0]
    - emailer.send: {type: deactivation_email}
    - trigger: [setRowData,"",$key,{usable: 'No',style: 'inactive',actions: 'slide,activate'}]
    - close_dialog: Credits Deactivated.
  audit:
    action: Deactivate Credits
    detail: $client_name $client_cellphone $client_email

grant:
  url: /credits/grant
  type: input_page
  modal:
    dialog: { class: [col s12 m10 l9] }
  class: [col s12 m10 l9, centered, no-float]
  inputs:
    - company: {type: isearch,valid: provided}
    - credits: { type: dropdown }
    - own_quantity:
        type: multi_input
        show: ~credits == 'custom'
        layout: { type: label_inside}
        inputs:
          - quantity:
              valid:
                - depends(credits,provided)
                - greater(0)
              on_keyup:
                  ~ $("#amount").text('0.00');
                    $('[action=calculate_pre_paid_cost]').trigger('click');
          - calculate_pre_paid_cost: { type: submit, template: none,show: 0}
          - amount: { type: filled_text}
  actions:
    - close
    - grant: {name: Grant Credits}
  post:
    - if !"$company":
        - let: {company: $partner }
    - if "$credits"=="custom":
        - read_config: currency
        - collection.values: [ rate, [start_date: /<=curdate(), currency, quantity: /<=$quantity], cost, paygate_amount: /(cost/quantity)*$quantity, quantity desc: /cast(quantity as unsigned)]
    - if "$credits"!="custom":
        - collection.values: [ rate, $credits, paygate_amount: cost, quantity]
    - collection.values: [partner, $company,client_name: name, client_email: email]
    - collection.values: [user,[partner: $company],user: id]
    - collection.insert: [credit,partner: $company,user,quantity,active: 1, type: "free", time: '/now()']
    - let: { granted_credits: $quantity }
    - refresh: "#credits_available"
    - emailer.send: {type: grant_notification_email}
  audit:
    action: Granted free credits
    detail: $quantity to $client_name

company:
  type: isearch
  drop: { max-height: 180px }
  option:
     name: $2
  post:
    - collection.search: [partner,"",identifier,name]

own_credit_history:
  url: /credits/own_credit_history
  type: list
  values:
    - collection.data: [credit,[partner],identifier,create_time,user: '/if(type!="free",partner.name,"Administrator")',type: type.name,quantity: /cast(quantity as unsigned) ,usable: '/if(active,"Yes","No")',actions: /"expand",active]

transactions:
  url: /credit/transactions
  type: datatable
  body: { max-height: 300 }
  flags: [show_titles]
  class: [widest]
  fields:
    - time: { width: 30%}
    - user: { width: 30% }
    - quantity: { width: 25%, class: [right-text] }
    - kind: { name: Type, width: 14% }
  values:
    - collection.data: [transaction,credit: $key,create_time,user: '/concat(user.first_name," ",user.last_name)',amount,kind]
  no_records:
    text: There are not yet any transactions using these credits.

list:
  type: datatable
  body: { max-height: 700 }
  sort: create_time
  class: [widest]
  sort_order: desc
  flags: [show_titles,filter]
  fields:
    - key: {show: no}
    - added_on: {width: 25%}
    - user: {name: Purchased/Granted by, width: 40%, class: [truncate-word]}
    - kind: {name: Type, width: 10%}
    - quantity: {width: 15%, class: [right-text]}
    - usable: {width: 10%, class: [right-text]}
    - actions: {width: 0%}
  expand:
    pages:
      - /credits/transactions
  values:
    - collection.values: [session,$sid,partner,user]
  on_deactivateCredits: ~this.trigger('refresh')
  on_activateCredits: ~this.trigger('refresh')

all_credit_history:
  url: /credits/all_credit_history
  type: list
  row_actions:
    - revoke: {class: [red],url: /credits/deactivate}
    - activate: {class: [green]}
  values:
    - collection.data: [credit,[],identifier,create_time,user: partner.name,type: type.name,quantity: /cast(quantity as unsigned) ,usable: '/if(active,"Yes","No")',actions: '/if(active,"expand,slide,revoke","expand,slide,activate")',active]

revoke:
  access: finance
  partner_access: merchant

grant_notification_email:
  from: $support_email
  to: $client_name  <$client_email>
  subject: Granted free credits
  message: >
    Dear <b>$client_name</b> <br><br>
    We have added $granted_credits credits to your account.<br><br>
    Regards,<br><br>
    <b>Customer Operations</b>

buy:
  name: Buy Credits
  type: input_page
  url: /credits/buy
  desc: Please note that rates shown on this page only applies to credits bought via credit card or bank deposit method.Purchase order may have different rates to the one selected or calculated here.
  modal:
    dialog: { class: [col s12 m10 l10] }

  class: [col s12 m10 l9, centered, no-float]
  inputs:
    - credits: { type: dropdown }
    - own_quantity:
        type: multi_input
        show: ~credits == 'custom'
        layout: { type: label_inside}
        inputs:
          - quantity:
              on_keyup:
                  ~ $("#amount").text('0.00');
                    $('[action=calculate_pre_paid_cost]').trigger('click');
          - calculate_pre_paid_cost: { type: submit, template: none,show: 0}
          - amount: { type: filled_text}
    - payment_method: { type: radiogroup }
  actions:
    - proceed

proceed:
  post:
    - close_dialog
    - if "$credits"=="custom":
        - read_config: currency
        - let: {quantity_before: $quantity}
        - collection.values: [ rate, [start_date: /<=curdate(),currency, quantity: /<=$quantity,partner_type: prepaid], cost, paygate_amount: /(cost/quantity)*$quantity,quantity desc: /cast(quantity as unsigned)]
        - let: {quantity: $quantity_before}
    - if "$credits"!="custom":
        - collection.values: [ rate, $credits, paygate_amount: cost, quantity]
    - write_session: [quantity,paygate_amount,payment_method]
    - if "$payment_method"=="credit_card":
        - write_session: [paygate_handler: "#paygate_payweb"]
        - show_dialog: /paygate/payweb
    - if "$payment_method"=="bank_deposit":
        - show_dialog: /credits/bank_deposit
    - if "$payment_method"=="purchase_order":
        - show_dialog: /credits/submit_purchase_order

submit_purchase_order:
  type: input_page
  modal:
    dialog: { class: [col s12 m10 l6] }
  inputs:
    - credits: { show: no, value: custom}
    - purchase_order_options:
        type: radiogroup
        options:
          - generate_purchase_order:
              on_change:
                ~ $('[action=generate]').trigger('click');
          - own_purchase_order
        on_change:
          ~$('#order_number').val("");
    - purchase_order:
        type: multi_input
        layout: { type: label_inside}
        inputs:
          - order_number: {class: [bold,text-orange]}
          - generate: {type: submit,validate: none,template: none,show: no}
    - credits_required:
        type: multi_input
        layout: { type: label_inside}
        inputs:
          - quantity:
              on_keyup:
                  ~ $("#amount").text('0.00');
                    $('[action=calculate_postpaid_cost]').trigger('click');
          - calculate_postpaid_cost: { type: submit, template: none,validate: quantity,show: 0}
          - amount: { type: filled_text}
    - upload_purchase_order: {type: file_uploader,attr: {hide: yes},show: ~purchase_order_options == 'own_purchase_order' }
  actions:
    - submit_purchase_order:
        post:
          - read_config: currency,upload_dir
          - let: {quantity_before: $quantity, order_type: $purchase_order_options, payment_method: purchase_order,path: $upload_dir/$order_number.pdf}
          - collection.values: [session,$sid,partner,user,client_name: partner.name]
          - if "$order_type" == 'generate_purchase_order':
              - collection.insert: [document, name: Purchase Order $order_number, path,mime: pdf]
          - if "$order_type" == 'own_purchase_order':
              - read_session: [new_document_id]
          - collection.values: [ rate, [start_date: /<=curdate(),currency, quantity: /<=$quantity,type: post_paid,client: $partner], cost, amount: /(cost/quantity)*$quantity,quantity desc: /cast(quantity as unsigned)]
          - collection.insert: [payment,reference1: $order_number,status: "approved",amount: $amount ,payment_method: $payment_method,purchase_order: $new_document_id]
          - collection.insert: [credit,quantity: $quantity_before,type: post_paid,payment: $new_payment_id,amount: $amount]
          - collection_values: [partner,[type: merchant,user.role: admin],merchant: identifier]
          - qmessenger.generate_po_document: [$partner, $order_number, $path,$currency,$new_credit_id,$user]
          - let: {counter: 1}
          - collection.values: [payment,[],counter: '/count(1)+1' ]
          - sql_values: select LPAD($counter,'6','0') counter
          - let: {invoice_number: IN$counter}
          - let: {path: $upload_dir/$invoice_number.pdf}
          - collection.insert: [document, name: Invoice Number $invoice_number,path,mime: pdf]
          - collection.insert: [payment,$new_payment_id,invoice: $new_document_id]
          - read_session: payment_method
          - qmessenger.generate_invoice: [$partner, $invoice_number, $path,$currency,$new_credit_id,$payment_method]
          - refresh: '#credits_available'
          - close_dialog
  audit:
    action: Make Purchase Order
    detail: $order_number $client_name

file_uploader:
  validate: none
  valid:
    - depends(purchase_order_options, equals(own_purchase_order))
    - extension(pdf)

generate:
  post:
    - let: { counter: 1 }
    - collection.values: [payment,[],counter: '/count(1)+1' ]
    - sql_values: select LPAD($counter,'5','0') counter
    - let: {order_number: PO#$counter}
    - update: order_number

bank_deposit:
  name: Bank Deposit/EFT
  type: wizard
  steps:
    - banking_details: {url: /payment/banking_details}
    - upload_proof: {url: payment/upload_proof}
    - complete: {prev: false}

complete:
  type: input_page
  class: [font-large]
  inputs:
    - default: {type: p,class: [center-text]}
    - template: none
    - Thank You.
    - Upon a successful review of your submission your credits shall be loaded within 24hrs.
    - vspace
  navigate:
    - finish: {action: close_dialog,class: [float-right]}

credits:
  option:
    name: $2 credits @ $4 $5
  valid:
    - depends(payment_method,either(credit_card,bank_deposit))
    - provided

  error: Must choose the number of credits or specify custom quantity
  options:
    - custom: { name: Specify Own Quantity }
    - read_config: registrar
    - read_session: currency
    - collection.data: [ rate, [start_date: /<=curdate(), currency, quantity: />1, active: 1, type: "prepaid", partner.name: $registrar], identifier, quantity asc: /cast(quantity as unsigned), cost, amount: '/round(cost/100,2)', currency]
    - keep_values: [data]

quantity:
  valid:
    - depends(credits, equals(custom))
    - numeric
    - greater_equal(200)

calculate_postpaid_cost:
  name: Calculate Cost
  post:
    - collection.values: [session,$sid,partner]
    - read_session: currency
    - collection.values: [ rate, [start_date: /<=curdate(), currency, quantity: /<=$quantity,type: post_paid,client: $partner],cost,amount: '/concat(round((cost/quantity)*$quantity/100,2) , " $currency")', quantity desc: /cast(quantity as unsigned) ]
    - update: amount
    - clear_values

calculate_pre_paid_cost:
  name: Calculate Cost
  post:
    - read_session: currency
    - collection.values: [ rate, [start_date: /<=curdate(), currency, quantity: /<=$quantity, type: prepaid], cost, amount: '/concat(round((cost/quantity)*$quantity/100,2) , " $currency")', quantity desc: /cast(quantity as unsigned) ]
    - update: amount
    - clear_values


payment_method:
  options:
    - credit_card: {name: Credit/Debit Card, attr: checked }
    - bank_deposit: {name: Bank Deposit/EFT}
    - purchase_order
  valid: either(credit_card,bank_deposit,purchase_order)

insufficient_credit:
  type: info_page
  class: [pad pad-large, center-text]
  lines:
    - You do not have sufficient credits to send messages. You need to buy at least: { class: [block]}
    - credits_required:
        type: filled_text
        class: [autowidth, font-xlarge]
    - credits
  values:
    - read_session: credits_required
  actions:
    - buy_credits: { action: [close_dialog, dialog],class: [block,centered,pad pad-tiny] }

order_number:
  valid:
    - at_least(5)
